git ini
git add .
git status
git -rm cached ---> Remueve del Staging el archivo. 
git config --list --> Ver configuracion por defecto. 
git config --list --show-origin ---> Muestra las rutas por defecto. 
git config --global user.name "pablo.martinez"
git config --global user.email "pablo.martinez@att.com"
git show doc.txt ---> Muestra historico de cambios
git checkout 2131jk76k8jh67kj historia.txt --> volver a una version anterior 
git checkout master historia.txt  --->
git master
git commit 
git clone url---> trae del repositorio remoto al directorio de trabajo y al repositorio local
git pull -->trae del repositorio remoto al directorio de trabajo
git push--> envia del repositorio local al remoto
git fetch--> trae del repositorioremoto al repositorio local
git merge-->copia del repositorio local al directorio de trabajo
git commit -am--> es el mismo git add + git commit (Solo finciona cuando ya se habia hecho un add)
git branch nombrederama --> crea una nueva rama. 
git checkout nombrederama--> moverse entre cabeceras
git branch -->muestra las ramas
git merge--> Fuciona las dos ramas (Prioridad desde la rama en que se haga el marge)
git remote add origin https://github.com/xx-xx/yy-yy
git remote
git remote -v 
git pull origin master
git config -l ---> Muestra la configuracion
git config --global user.email "asd@asd.com"
git chechout -b nombrederama --> crear una rama y te pasa hacia ella.
git rebase nombrederama --> Trae los cambios de la otra rama a la cual estas (es lo mismo que un merge pero con merge se elimina la rama origen).
Formato Markdown
gitk---> ver de forma grafica los cambios
git clone git@github.com:pemsdev10/Platzi.git --> trae el proyecto de github al equipo
git remote add upstream https://repositorioajeno.git --> crear nueva rama para traer info de otro repositorio ajeno. 
git rebase --> agarra la rama entera y la pega a la otra, es una mala practica. re-escribe la historia.
		Rebase se hace primero a la que cambia y luego a la final. En el ejemplo primero desde experimento a la master
		y luego desde la master a experimento.
git branch -D nombrederama-->Borrar rama 
git stash --> Cuando quiero guardar pero sin hacer commit y te devuelve al commit anterior. (para ver lo del stash nuevament
		toca git stash pop)
git stash list --> Ver los que tengo en estado stash.
git stash pop --> volver a los cambios que tenia sin hacer el commit. 
git stash branch nombrederama --->
git stash drop --->borra el stash guardado
git clean --dry-run --> vista previa de lo que va a borrar
git clean -f --> borra definitivamente los archivos q no esten add (No borra carpetas y archivos ignorados)
git cherry-pick 11jk3j2(Es el hash del commit) --> Sirve para traer un commit viejo a la rama master. Es mala practica :(
git commit --amend -->los cambios que hice los va a pegar al commit anterior y no crearÃ¡ uno nuevo, es necesario antes 
			ejecutar el comando git add nombredelomidficado
git reflog ---> muestra todos los logs que han sucedido en tu trabajo.
git reset --hard qewq34 --> restaura hasta ese commit todos los cambios, borrando los commits que esten por delante de el.
git grep palabraabuscar --> Se utiliza para buscar una palabra en todo el proyecto
git grep -c palabraabuscar --> Muestra cuantas veces esta la palabra.
git grep -n palabraabuscar --> Muestra exactamente el numero en la linea de codigo donde la use
git log -S palabraabuscar --> busca la palabra en los commits 
git shortlog -sn --all --no-merges ---> cambios realizados por las personas. (los que han hecho commits)
git config --global alias.stast "git shortlog -sn --all --no-merges"
git blame -c archivoquequieroverloscambios --> ver linea por linea que y quien hizo los cambios 
git blame --help -->abre en el navegador como funciona blame
git blame css/estilos.css -L35,53 -c --> buscar quien realizo cambios desde la linea 35 hasta la linea 53
git branch -r --> ver ramas remotas en github 
git branch -r --> ver ramas remotas y locales (Blanco locales, rojas remotas)
--------------------------crear una llave ssh----------------
ssh-keygen -t rsa -b 4096 -C "pablomartinezs10@hotmail.com" 
eval $(ssh-agent)
ssh-add ~/.ssh/id_rsa
git remote -v
git remote set-url origin git@github.com:pemsdev10/Platzi.git
git pull
git pull origin master
git pull origin master
git push origin master
-----------------------------------------------------------------
git log --stat --> ver los cambios especificos en los archivos en los commits
git log --all
git log --all --graph
git log --all --graph --decorate --oneline
alias arbolito ="git log --all --graph --decorate --oneline"
git tag 
git show-ref --tag
git push origin --tags
git tag -d dormido ----> elimina un tag
git push origin :refs/tags/dormido
git show branch
git show branch --all
gitk --Ver de forma grafica los cambios. 
git log --graph --> 
-------------------------------------------------------
Pull Request


